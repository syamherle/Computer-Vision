// B657 assignment 2 skeleton code
//
// Compile with: "make"
//
// See assignment handout for command line and project specifications.


//Link to the header file
#include "CImg.h"
#include <ctime>
#include <iostream>
#include <stdlib.h>
#include <string>
#include <vector>
#include <Sift.h>
#include<cmath>
<<<<<<< HEAD
#include<math.h>
#include <climits>

=======
#include<algorithm>
#include<time.h>
>>>>>>> part_2

//Use the cimg namespace to access the functions easily
using namespace cimg_library;
using namespace std;

#define DIST_THRES 30

class Point{
  
    float x, y;
  public:
    Point(float a,float b):x(a),y(b){};
    float get_x(){
      return x;
    }
    float get_y(){
      return y;
    }
};

CImg<float> estimate_homography_dlt(int n, vector<Point> image1, vector<Point> image2){
  
  CImg<float> A_mat(9, 2*n);
  A_mat.fill(0);
  
  CImg<float> H_mat(3,3);
 
  for(int i=0;i<n;i++){
    A_mat(0,2*i) = -image1[i].get_x();
    A_mat(1,2*i) = -image1[i].get_y();
    A_mat(2,2*i) = -1;
    A_mat(6,2*i) = image1[i].get_x()*image2[i].get_x();
    A_mat(7,2*i) = image1[i].get_y()*image2[i].get_x();
    A_mat(8,2*i) = image2[i].get_x();
    
    A_mat(3,2*i+1) = -image1[i].get_x();
    A_mat(4,2*i+1) = -image1[i].get_y();
    A_mat(5,2*i+1) = -1;
    A_mat(6,2*i+1) = image1[i].get_x()*image2[i].get_y();
    A_mat(7,2*i+1) = image1[i].get_y()*image2[i].get_y();
    A_mat(8,2*i+1) = image2[i].get_y();
  }
  
  CImgList<float> svd_mat = A_mat.get_SVD();
  
  H_mat(0,0) = svd_mat[2](8,0);
  H_mat(1,0) =  svd_mat[2](8,1);
  H_mat(2,0) = svd_mat[2](8,2);
  H_mat(0,1) = svd_mat[2](8,3);
  H_mat(1,1) = svd_mat[2](8,4);
  H_mat(2,1) = svd_mat[2](8,5);
  H_mat(0,2) = svd_mat[2](8,6);
  H_mat(1,2) = svd_mat[2](8,7);
  H_mat(2,2) =  svd_mat[2](8,8);

  /*
  cout << "A size:" << A_mat.size() << endl;
  cout << "A width:" << A_mat.width() << endl;
  cout << "A height:" << A_mat.height() << endl;
  cout << "U width" << svd_mat[0].width() << endl;
  cout << "U heigth" << svd_mat[0].height() << endl;
  cout << "D width" << svd_mat[1].width() << endl;
  cout << "D heigth" << svd_mat[1].height() << endl;
  cout << "V width" << svd_mat[2].width() << endl;
  cout << "V heigth" << svd_mat[2].height() << endl;
  
  cout << svd_mat[2](8,0)<<endl;
  cout << svd_mat[2](8,1)<<endl;
  cout << svd_mat[2](8,2)<<endl;
  cout << svd_mat[2](8,3)<<endl;
  cout << svd_mat[2](8,4)<<endl;
  cout << svd_mat[2](8,5)<<endl;
  cout << svd_mat[2](8,6)<<endl;
  cout << svd_mat[2](8,7)<<endl;
  cout << svd_mat[2](8,8)<<endl;
  */
  return H_mat;
  
}

vector<Point> normalization(int n, vector<Point> points, CImg<float> &T_mat){
  //CImg<float> T_mat(3, 3);
  //T_mat.fill(0);
  
  CImg <float> temp_mat(1,3);
  temp_mat.fill(1);

  vector<Point> new_points;
  new_points.reserve(n);

  float mean_x, mean_y, scale,temp;
  mean_x = 0;
  mean_y = 0;
  temp = 0;
  //Mean Calculation
  for(int i=0; i<n; i++){
    mean_x += points[i].get_x();
    mean_y += points[i].get_y();
  }
  
  mean_x = mean_x/(float) n;
  mean_y = mean_y/(float) n;
  
  for(int i=0; i<n; i++){
    temp += sqrt(pow(points[i].get_x()-mean_x,2))+sqrt(pow(points[i].get_y()-mean_y,2));
  }
  temp = temp/(float)n;
  scale = sqrt(2)/temp;
  //Transformation matrix
  T_mat(0,0) = scale;
  T_mat(2,0) = -scale*mean_x;
  T_mat(1,1) = scale;
  T_mat(2,1) = -scale*mean_y;
  T_mat(2,2) = 1;
  
  //Transforming all points
  for(int i=0; i<n; i++){
    temp_mat(0,0) = points[i].get_x();
    temp_mat(0,1) = points[i].get_y();
    temp_mat = T_mat * temp_mat;
    Point point(temp_mat(0,0)/(float) temp_mat(0,2),temp_mat(0,1)/(float) temp_mat(0,2));
    new_points.push_back(point); 
  }
  return new_points;
}

int inliers_count(int n, vector<Point> image1, vector<Point> image2, CImg<float> h_mat){
  int count = 0;
  float dist = 0;
  CImg <float> temp_mat(1,3);
  CImg<float> inv_h_mat = h_mat.get_invert();
 
  for(int i=0; i<n; i++){
    temp_mat.fill(1);
    temp_mat(0,0) = image1[i].get_x();
    temp_mat(0,1) = image1[i].get_y();
    temp_mat =  h_mat * temp_mat;
    cout << "inliers mul1" << endl;
    Point point1(temp_mat(0,0)/(float) temp_mat(0,2),temp_mat(0,1)/(float) temp_mat(0,2));
    dist = pow(image2[i].get_x()-point1.get_x(),2)+pow(image2[i].get_y()-point1.get_y(),2);
    
    temp_mat.fill(1);
    temp_mat(0,0) = image2[i].get_x();
    temp_mat(0,1) = image2[i].get_y();
    temp_mat = inv_h_mat * temp_mat;
    cout << "inliers mul2" << endl;
    Point point2(temp_mat(0,0)/(float) temp_mat(0,2),temp_mat(0,1)/(float) temp_mat(0,2));
    dist += pow(image1[i].get_x()-point2.get_x(),2)+pow(image1[i].get_y()-point2.get_y(),2);
    
    if(dist < DIST_THRES){
      count++;
    }
    
  }
  
  return count;
}

bool contains(int a[], int x){
  size_t myArraySize = sizeof(a) / sizeof(int);
  int *end = a + myArraySize;
  bool exists =  std::find(a, end, x) != end;
  return exists;
}
/*RANSAC
 */
int Ransac(int n, vector<Point> image1, vector<Point> image2 ){
  CImg<float> T_mat_image1(3, 3), T_mat_image2(3,3);
  T_mat_image1.fill(0);
  T_mat_image2.fill(0);
  //Parameters
  //thres - threshold used to identify a point that fits well
  //k - number of iterations
  float thres;
  int k=1;
  int sample_index[4];
  int num_inliers = 0;
  vector<Point> sample_image1;
  vector<Point> sample_image2;
  sample_image1.reserve(4);
  sample_image2.reserve(4);

  srand(time(NULL));
  for(int i=0; i<k; i++){
    //randomly sample 4 points
    for(int j=0; j<4; j++){
      int r;
      do{
        r = rand() % n;
      }while(contains(sample_index,r));
      sample_index[j] = r;
      Point point_image1(image1[sample_index[j]].get_x(),image1[sample_index[j]].get_y());
      Point point_image2(image2[sample_index[j]].get_x(),image2[sample_index[j]].get_y());
      sample_image1.push_back(point_image1);
      sample_image2.push_back(point_image2);
    }
    
    //Normalization
    sample_image1 = normalization(4,sample_image1,T_mat_image1);
    sample_image2 = normalization(4,sample_image2,T_mat_image2);
    //DLT to estimate Homography
    CImg<float> h_mat = estimate_homography_dlt(4,sample_image1,sample_image2);
    T_mat_image2.invert();
    h_mat = T_mat_image2 * h_mat;
    cout << "Ransac mult1" << endl;
    h_mat = h_mat * T_mat_image1;
    cout << "Ransac mult2" << endl;
    num_inliers = inliers_count(n, image1, image2, h_mat);
  }
  return num_inliers;
}
double Resample(CImg<double> &src,double &u,double &v)
{	
	if(u <0 or v<0){
		return 0.0;
	}else{
		int i =floor(u);
		int j = floor(v);
		float a = u-i;
		float b = v-j;
		float first_pt = (1-a)*(1-b)*src(i,j);
		float sec_pt = a*(1-b)*src(i+1,j);
		float third_pt = a*b*src(i+1,j+1);
		float frth_pt = (1-a)*b*src(i,j+1);
		return first_pt+sec_pt+third_pt+frth_pt;
	}
	// cout<<iu<<"\t"<<iv<<endl;
	
}

double calculateEucidean(SiftDescriptor desc1,SiftDescriptor desc2)
{
    double diff = 0;
    for(int i = 0;i<128;i++)
    {
        diff+= (desc1.descriptor[i] - desc2.descriptor[i])*(desc1.descriptor[i] - desc2.descriptor[i]);
    }

    diff = sqrt (diff);
    
    return diff;
}



double * matchDescriptors( vector<SiftDescriptor> descriptor1, vector<SiftDescriptor> descriptor2, SiftDescriptor closeDes[][2], double desDist[][2])
{
    double *ratio = new double[descriptor1.size()];
    int count = 0;
    
    int M = descriptor1.size();
    int N = descriptor2.size();
    SiftDescriptor clos1;
    SiftDescriptor close2;
    double diff;
    double max = INT_MIN;
    double min = INT_MAX;
    
    for(int i=0; i<M; i++)
    {
        for(int j=0; j<N; j++)
        {
            diff = calculateEucidean(descriptor1[i], descriptor2[j]);
            if(diff < desDist[i][0])
            {
                desDist[i][1] = desDist[i][0];
                desDist[i][0] = diff;
                closeDes[i][1] = closeDes[i][0];
                closeDes[i][0] = descriptor2[j];
            }
            else if(diff >= desDist[i][0] && diff < desDist[i][1])
            {
                desDist[i][1] = diff;
                closeDes[i][1] = descriptor2[j];
            }
        }
    }
    
    
    for(int i = 0; i<M; i++)
    {
        ratio[i] = (desDist[i][0]/desDist[i][1]);
        
        if(max < ratio[i])
            max = ratio[i];
        if(min > ratio[i])
            min = ratio[i];
    }
    
    cout<<"MAx\t"<<max<<"\tMIN\t:"<<min;
    

    return ratio;
}


int main(int argc, char **argv)
{
  try {

    if(argc < 2)
      {
	cout << "Insufficent number of arguments; correct usage:" << endl;
	cout << "    a2 part_id ..." << endl;
	return -1;
      }

    string part = argv[1];
    string inputFile = argv[2];
    string ip1 = argv[3];
    cout<<"\n Totak ARGS:"<<argc<<"\n";
    if(part == "part1")
      {
	// This is just a bit of sample code to get you started, to
	// show how to use the SIFT library.
          
	CImg<double> input_image(inputFile.c_str());
    CImg<double> input_image1(ip1.c_str());
    double *p;
    
    // convert image to grayscale
	CImg<double> gray = input_image.get_RGBtoHSI().get_channel(2);
    CImg<double> gray1 = input_image1.get_RGBtoHSI().get_channel(2);
	
        vector<SiftDescriptor> descriptors = Sift::compute_sift(gray);
        vector<SiftDescriptor> descriptors1 = Sift::compute_sift(gray1);
        double closest[descriptors.size()][2];
        SiftDescriptor closeDesc[descriptors.size()][2];
        
          
          
          for(int i = 0; i< descriptors.size();i++)
          {
              closest[i][0] =  INT_MAX;
              closest[i][1] =  INT_MAX;
              closeDesc[i][0] = descriptors[i];
              closeDesc[i][1] = descriptors[i];
          }
        
          
         double diff1 = calculateEucidean(descriptors[3], descriptors1[3]);
          
          cout<<"Difference\n"<<diff1<<endl;
        p = matchDescriptors(descriptors, descriptors1, closeDesc, closest);
          for(int i = 0; i<descriptors.size(); i++)
          {
            cout<<i<<"\t"<<p[i]<<endl;
          }
          double wid = input_image.width();
    input_image.append(input_image1,'x', 0);
          const unsigned char color[] = { 64 };

	for(int i=0; i<descriptors.size(); i++)
	  {
          /*
	    cout << "Descriptor #" << i << ": x=" << descriptors[i].col << " y=" << descriptors[i].row << " descriptor=(";
	    for(int l=0; l<128; l++)
	      cout << descriptors[i].descriptor[l] << "," ;
	    cout << ")" << endl;
           */
          if(p[i] < 0.8)
          {
              for(int j=0; j<5; j++)
                  for(int k=0; k<5; k++)
                      if(j==2 || k==2)
                          for(int p=0; p<3; p++)
                          {
                              input_image(descriptors[i].col+k-1, descriptors[i].row+j-1, 0, p)=0;
                              input_image(closeDesc[i][0].col+wid+k-1, closeDesc[i][0].row+j-1, 0, p)=0;
                          }
              input_image.draw_line(descriptors[i].col-1, descriptors[i].row-1,closeDesc[i][0].col+wid-1, closeDesc[i][0].row-1, color);
          }
        
	  }

          input_image.get_normalize(0,255).save("sift.png");
          
      }
    else if(part == "part2")
      {
	// do something here!
	int n=4;
        vector<Point> image1, image2;
        image1.reserve(n);
        image2.reserve(n);

        Point p1_image1(0,0);
        Point p1_image2(0,0);
        image1.push_back(p1_image1);
        image2.push_back(p1_image2);
        
        Point p2_image1(1,0);
        Point p2_image2(1,0);
        image1.push_back(p2_image1);
        image2.push_back(p2_image2);

        Point p3_image1(0,1);
        Point p3_image2(0,1);
        image1.push_back(p3_image1);
        image2.push_back(p3_image2);

        Point p4_image1(1,1);
        Point p4_image2(2,1);
        image1.push_back(p4_image1);
        image2.push_back(p4_image2);
       /* 
        Point p5_image1(1.01,0.99);
        Point p5_image2(2.01,1.01);
        image1.push_back(p5_image1);
        image2.push_back(p5_image2);
       */
        //CImg<float> h_mat = estimate_homography_dlt(n,image1,image2);
        //cout << "1,0" <<h_mat(1,0) << endl;
        int count = Ransac( n, image1,image2 );
        cout << "Inliers Count:" << count;
      }
    else if(part == "part3")
      {
	// do something here!


        CImg<double> input_image(inputFile.c_str());
        CImg<double> gray = input_image.get_RGBtoHSI().get_channel(2);
		double transMat[3][3] =
						{
							{1.1246685805361205,-0.3146766039759572,222.9409246881795},
							{0.10883905064150695,0.6850586647407801,-19.92469533821099},
							{0.0002645872396251113,-0.0005970689247421533,1.0827848752468152}
						};
						
        CImg<double> outImg(input_image.width(),input_image.height());
		cimg_forXY(outImg,x,y) { 
				double dest_x = (transMat[0][0] * x + transMat[0][1]*y + transMat[0][2])/(transMat[2][0]*x + transMat[2][1]*y + transMat[2][2]); 
				double dest_y = (transMat[1][0] *x + transMat[1][1]*y + transMat[1][2])/(transMat[2][0]*x + transMat[2][1]*y + transMat[2][2]);
					
				outImg(x,y) = Resample(gray, dest_x,dest_y);
		} 
		
		outImg.get_normalize(0,255).save("warped.png");
		
      }
    else
      throw std::string("unknown part!");

    // feel free to add more conditions for other parts (e.g. more specific)
    //  parts, for debugging, etc.
  }
  catch(const string &err) {
    cerr << "Error: " << err << endl;
  }
}








